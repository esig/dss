/**
 * DSS - Digital Signature Services
 * Copyright (C) 2015 European Commission, provided under the CEF programme
 * 
 * This file is part of the "DSS - Digital Signature Services" project.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
package eu.europa.esig.dss.validation;

import eu.europa.esig.dss.enumerations.DigestAlgorithm;
import eu.europa.esig.dss.enumerations.EncryptionAlgorithm;
import eu.europa.esig.dss.model.InMemoryDocument;
import eu.europa.esig.dss.model.x509.CertificateToken;
import eu.europa.esig.dss.model.x509.revocation.crl.CRL;
import eu.europa.esig.dss.model.x509.revocation.ocsp.OCSP;
import eu.europa.esig.dss.policy.ValidationPolicy;
import eu.europa.esig.dss.policy.ValidationPolicyFacade;
import eu.europa.esig.dss.policy.jaxb.Algo;
import eu.europa.esig.dss.policy.jaxb.AlgoExpirationDate;
import eu.europa.esig.dss.policy.jaxb.CryptographicConstraint;
import eu.europa.esig.dss.policy.jaxb.Level;
import eu.europa.esig.dss.policy.jaxb.ListAlgo;
import eu.europa.esig.dss.spi.DSSUtils;
import eu.europa.esig.dss.spi.x509.CommonTrustedCertificateSource;
import eu.europa.esig.dss.spi.x509.ListCertificateSource;
import eu.europa.esig.dss.spi.x509.revocation.RevocationToken;
import eu.europa.esig.dss.spi.x509.revocation.crl.ExternalResourcesCRLSource;
import eu.europa.esig.dss.spi.x509.revocation.ocsp.ExternalResourcesOCSPSource;
import eu.europa.esig.dss.utils.Utils;
import org.junit.jupiter.api.Test;

import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class RevocationDataVerifierTest {

    @Test
    public void trustedSourceTest() {
        String certB64 = "MIID2jCCAzygAwIBAgIQEQmhFq6e3gQzhrtuqx1sKjAKBggqhkjOPQQDBDCBiDELMAkGA1UEBhMCQ1IxJjAkBgNVBAoMHUhlcm1lcyBTb2x1Y2lvbmVzIGRlIEludGVybmV0MRYwFAYDVQQLDA1GaXJtYSBkaWdpdGFsMR8wHQYDVQQDDBZBQyBwb2xpdGljYSBUU0EgSGVybWVzMRgwFgYDVQQFEw9DUEotMy0xMDEtOTE4MTAwHhcNMjEwMzMwMTc1MjQ1WhcNMzIwMzI3MTc1MjQ1WjB8MQswCQYDVQQGEwJDUjEmMCQGA1UECgwdSGVybWVzIFNvbHVjaW9uZXMgZGUgSW50ZXJuZXQxFjAUBgNVBAsMDUZpcm1hIERpZ2l0YWwxEzARBgNVBAMMCkhlcm1lcyBUU0ExGDAWBgNVBAUTD0NQSi0zLTEwMS05MTgxMDCBmzAQBgcqhkjOPQIBBgUrgQQAIwOBhgAEAHDK7hU/w3gbDuoo5Vqcaiz5ME95lHdOWUM65TuY0mnHZPCjimYW37jcKEYPafUCAupRaElO5LPggKxHfGLQK9fjAanRlTxIPmAl68SkpwYfIxeZeBvpfymVsg87YASTv3PY3lLLFi0i4U0/aO2jA92UGeNT+uelidcy9F/1ErOcSsrVo4IBTjCCAUowHwYDVR0jBBgwFoAUVm4BgFh89eU+jDQ3k5yB/Vw3LvcwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCBkAwHQYDVR0OBBYEFGEm1wgsmDICKVBvr44pLjsmbRAfMIGOBggrBgEFBQcBAQSBgTB/MDwGCCsGAQUFBzAChjBodHRwczovL2FwcC5maXJtYS1kaWdpdGFsLmNyL2ZpbGVzL2FjLXRzYS12MS5jcnQwPwYIKwYBBQUHMAGGM2h0dHBzOi8vYXBwLmZpcm1hLWRpZ2l0YWwuY3IvaGFwaS9hYy9vY3NwL2FjLXRzYS12MTBBBgNVHR8EOjA4MDagNKAyhjBodHRwczovL2FwcC5maXJtYS1kaWdpdGFsLmNyL2ZpbGVzL2FjLXRzYS12MS5jcmwwCgYIKoZIzj0EAwQDgYsAMIGHAkFKqSNFeD7W9Gpf1fVaaE/ki58f4QDnrGsM3E1UHyryI9z6S5IVxIu2QCE6gwKRGYWopj1fdIFQeAC/R0ZNgXQAHgJCATx4P1dt/2iLQ4nfunRDgji3TpCFh0qZYw+N+RVs2SlVzRCzeujeLCOFyR92HBODZXx8ERUpT7r6MYou9kVCuJQL";
        String caCertB64 = "MIIDwzCCAyWgAwIBAgIQchZPmvJqypVzPW25na7FpDAKBggqhkjOPQQDBDCBgzELMAkGA1UEBhMCQ1IxJjAkBgNVBAoMHUhlcm1lcyBTb2x1Y2lvbmVzIGRlIEludGVybmV0MRYwFAYDVQQLDA1GaXJtYSBkaWdpdGFsMRowGAYDVQQDDBFBQyBSYWl6IEhlcm1lcyBWMTEYMBYGA1UEBRMPQ1BKLTMtMTAxLTkxODEwMB4XDTIxMDMzMDE3MDcwM1oXDTQ5MDMyMzE3MDcwM1owgYgxCzAJBgNVBAYTAkNSMSYwJAYDVQQKDB1IZXJtZXMgU29sdWNpb25lcyBkZSBJbnRlcm5ldDEWMBQGA1UECwwNRmlybWEgZGlnaXRhbDEfMB0GA1UEAwwWQUMgcG9saXRpY2EgVFNBIEhlcm1lczEYMBYGA1UEBRMPQ1BKLTMtMTAxLTkxODEwMIGbMBAGByqGSM49AgEGBSuBBAAjA4GGAAQAqxLqeFumtOJYvc3yKKJXonOo2AMM2UgkFN6UQ9kT/xzeyasPZycP+jXG56QI49hm7elSxDDDbNl6p1xtOVCzVWoBf1YktAuelBkZAVtXomrmkgYRcjWSnZ3ktHDLAGi3gg2ODnABly4RijXlyHdGBj56KuXL6ByjFmH5FqXOlaqZ8P6jggEvMIIBKzCBhQYIKwYBBQUHAQEEeTB3MDgGCCsGAQUFBzAChixodHRwczovL2FwcC5maXJtYS1kaWdpdGFsLmNyL2ZpbGVzL2FjLXYxLmNydDA7BggrBgEFBQcwAYYvaHR0cHM6Ly9hcHAuZmlybWEtZGlnaXRhbC5jci9oYXBpL2FjL29jc3AvYWMtdjEwHwYDVR0jBBgwFoAUnOXvW9wXgKlvjgkLMo3NmjthWm0wEgYDVR0TAQH/BAgwBgEB/wIBADA9BgNVHR8ENjA0MDKgMKAuhixodHRwczovL2FwcC5maXJtYS1kaWdpdGFsLmNyL2ZpbGVzL2FjLXYxLmNybDAOBgNVHQ8BAf8EBAMCAYYwHQYDVR0OBBYEFFZuAYBYfPXlPow0N5Ocgf1cNy73MAoGCCqGSM49BAMEA4GLADCBhwJBD6XOKDHsm3C4vg7IR0s7pJEqy1WyBRBd8jNJDyFIHTNTiPwYPPr1yKajmQXFmWIaF0/53nbONb1qoGx69nn0RLsCQgFX/T7v79V4qiF359N2pKQ8LibHxuhCW2XzMEHiASNBFz03Puhk0NwBrhFRjx+q+jWqPBzCAw0D/lSBZzpMj3sDFQ==";
        String ocspTokenB64 = "MIIEXQoBAKCCBFYwggRSBgkrBgEFBQcwAQEEggRDMIIEPzCBi6IWBBQluJ/30xqImLS85/lyCyRK4gIsWRgPMjAyMjA2MDgxNDU0MTZaMGAwXjBJMAkGBSsOAwIaBQAEFPEe8E6lpHeIiRuMtWD94cAS6rzdBBRWbgGAWHz15T6MNDeTnIH9XDcu9wIQEQmhFq6e3gQzhrtuqx1sKoAAGA8yMDIyMDYwODE0NTQxNlowCgYIKoZIzj0EAwQDgYsAMIGHAkIBo5qFWVzpxPU02LB215ZRquCl3t9RlxkS3vnucjfxk5vLN37W2hUP7ovZlRHVaf5xzNuLSMLqvrxzwue/r+PAQBMCQRc5AaMQTzfEuoM3AI6HPLhtbFMm79KmLqom+qiItT/uIOzfm3DUZ37uLeX4xBNYosMCKPk8ds45+sy4KqSHBqwZoIIDEzCCAw8wggMLMIICbKADAgECAhARCaEWrp7eBDOGu26rHWwsMAoGCCqGSM49BAMEMIGIMQswCQYDVQQGEwJDUjEmMCQGA1UECgwdSGVybWVzIFNvbHVjaW9uZXMgZGUgSW50ZXJuZXQxFjAUBgNVBAsMDUZpcm1hIGRpZ2l0YWwxHzAdBgNVBAMMFkFDIHBvbGl0aWNhIFRTQSBIZXJtZXMxGDAWBgNVBAUTD0NQSi0zLTEwMS05MTgxMDAeFw0yMjA0MTYwNDA1NDdaFw0yMzA0MTYwNDA1NDdaMIGGMQswCQYDVQQGEwJDUjEmMCQGA1UECgwdSGVybWVzIFNvbHVjaW9uZXMgZGUgSW50ZXJuZXQxFjAUBgNVBAsMDUZpcm1hIERpZ2l0YWwxHTAbBgNVBAMMFE9DU1AgQUNUU0EgUmVzcG9uZGVyMRgwFgYDVQQFEw9DUEotMy0xMDEtOTE4MTAwgZswEAYHKoZIzj0CAQYFK4EEACMDgYYABAENFyi+mZ0NBAD19dkmGZmYKjo0FE3LDO2eeMZJzvv01F5rwHE0x9l7hMdaPctF7nnYWsN6ibMiihU4XuDT+Vl5xgFbC1c54YCUH9UFPkKr2/fqE43agnDwqd+FaBZAc2txl+sUO9tVyUu5+qM192BzbwSl2ZqWndD3oej5Yj53bzy9JKN1MHMwHwYDVR0jBBgwFoAUVm4BgFh89eU+jDQ3k5yB/Vw3LvcwDAYDVR0TAQH/BAIwADATBgNVHSUEDDAKBggrBgEFBQcDCTAOBgNVHQ8BAf8EBAMCB4AwHQYDVR0OBBYEFCW4n/fTGoiYtLzn+XILJEriAixZMAoGCCqGSM49BAMEA4GMADCBiAJCAJixDEgLUSXAmf2wIt8yUDQ520gIt75WGbjqnPAc+i195BoD+clWCpXPOPQIhGy8zWEQq+gBk0QDkNMRepld/uIWAkIAr0JRsiBtYjR6517pJ0kbK8JKnmH2agmmhAVpy2x/guSPxai39R1gO7rttnFOk2SdDPvutaZfGiQmE8bPUudBxBY=";

        ExternalResourcesOCSPSource ocspSource = new ExternalResourcesOCSPSource(new InMemoryDocument(Utils.fromBase64(ocspTokenB64)));
        List<RevocationToken<OCSP>> revocationTokens = ocspSource.getRevocationTokens(DSSUtils.loadCertificateFromBase64EncodedString(certB64), DSSUtils.loadCertificateFromBase64EncodedString(caCertB64));
        assertEquals(1, revocationTokens.size());

        RevocationToken<OCSP> ocspToken = revocationTokens.iterator().next();

        RevocationDataVerifier revocationDataVerifier = RevocationDataVerifier.createDefaultRevocationDataVerifier();
        assertFalse(revocationDataVerifier.isAcceptable(ocspToken));

        CommonTrustedCertificateSource trustedCertificateSource = new CommonTrustedCertificateSource();
        trustedCertificateSource.addCertificate(ocspToken.getIssuerCertificateToken());
        revocationDataVerifier.setTrustedCertificateSource(new ListCertificateSource(trustedCertificateSource));
        assertTrue(revocationDataVerifier.isAcceptable(ocspToken));
    }

    @Test
    public void digestAlgorithmTest() {
        String certB64 = "MIIFQDCCBCigAwIBAgIOGCB2t4Cg4gEAAQAOEN4wDQYJKoZIhvcNAQELBQAwbTELMAkGA1UEBhMCTFQxEjAQBgNVBGETCTE4ODc3ODMxNTE2MDQGA1UEChMtQXNtZW5zIGRva3VtZW50dSBpc3Jhc3ltbyBjZW50cmFzIHByaWUgTFIgVlJNMRIwEAYDVQQDEwlBRElDIENBLUEwHhcNMTkwMTE1MDc1MDUwWhcNMjIwMTE0MDc1MDUwWjBlMQswCQYDVQQGEwJMVDEaMBgGA1UEAwwRQURPTUFTIEJJUsWgVFVOQVMxEzARBgNVBAQMCkJJUsWgVFVOQVMxDzANBgNVBCoTBkFET01BUzEUMBIGA1UEBRMLMzgwMDMxMzA2OTMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCpBBVaIBn1jxl44uuvkJWkW5F3rtoUsmAkMJPlPyzQOg87h07uYOIJk4YDIpvujDaL3y3RAy7ARFWpY31zn0b0TnMkDyuf5JYtro6ZpR3v/wijVUNYyGZYpbc42WVNVp/AYuE6IJ7ecE1dMMJDHVkJAmoH2wnT+Lnqp71n51luYc5v0VP+OFmPqPzuSbiwXewOg8PHARkv9l8d0FnoUmKg5xpm+jbjCFsOC77hkwjUDQxu9Yv7p+T1X7+se46GDOm287i2iW66bZYu4qy6ycrznNuwWLtU1i5Z7ypoNGJ++IRn4wP80CvwzUo5TNcLD8Ql3PaDs8GPKXfpBz2zd4MBAgMBAAGjggHkMIIB4DBLBgNVHQkERDBCMA8GCCsGAQUFBwkDMQMTAU0wHQYIKwYBBQUHCQExERgPMTk4MDAzMTMxMjAwMDBaMBAGCCsGAQUFBwkEMQQTAkxUMB0GA1UdDgQWBBSkKwML7BV258Cpil5bewoD6itogjAOBgNVHQ8BAf8EBAMCBsAwHwYDVR0jBBgwFoAUYpbcZMVf8JBEU79q1WAACu/0N7IweAYIKwYBBQUHAQEEbDBqMDQGCCsGAQUFBzABhihodHRwOi8vbnNjLnZybS5sdC9PQ1NQL29jc3ByZXNwb25kZXIubnNjMDIGCCsGAQUFBzAChiZodHRwOi8vbnNjLnZybS5sdC9haWEvQURJQ19DQS1BKDEpLmNydDAVBgNVHSUEDjAMBgorBgEEAYI3CgMMMEQGA1UdIAQ9MDswOQYLKwYBBAGChlUCAgIwKjAoBggrBgEFBQcCARYcaHR0cDovL25zYy52cm0ubHQvcmVwb3NpdG9yeTAdBgkrBgEEAYI3FQoEEDAOMAwGCisGAQQBgjcKAwwwSwYIKwYBBQUHAQMEPzA9MAgGBgQAjkYBATAIBgYEAI5GAQQwJwYGBACORgEFMB0wGxYVaHR0cDovL25zYy52cm0ubHQvcGRzEwJlbjANBgkqhkiG9w0BAQsFAAOCAQEAIHcOUDrDtW1cJVkCsKpdniYpBBoZfmwX0VIM+mTevRb/dCTMyHHp+DkfauWXEGUEkl+PoZb8r9hoYcBWYvbIXbSEPnoRX26BLXeNGKz4LxqoqoHRqDFSOr7+7uFkhIwalM5mjc9c/oOJZu5xTALH/TCSRD4TVp48/+UiII/JpC+700N8oNbPkJUoKBpfRFcD89WGlvywrGYyD1nPoSn+KF7lmxenl+KEJKE6q0UdzV9kbzkk7BlksiUL9U9D0c7emx6pRk1Mw7fqTVD/ETGqmKVR6lzIQcY/GLQ55W968FrovU6F7TP/7qW8ahYzdM09sEnoIeG5jet3mYVHPEyGMA==";
        String caCertB64 = "MIIGEjCCA/qgAwIBAgIOLudyCD31w+EAAAAAAAgwDQYJKoZIhvcNAQELBQAwcDELMAkGA1UEBhMCTFQxEjAQBgNVBGETCTE4ODc3ODMxNTE2MDQGA1UEChMtQXNtZW5zIGRva3VtZW50dSBpc3Jhc3ltbyBjZW50cmFzIHByaWUgTFIgVlJNMRUwEwYDVQQDEwxBRElDIFJvb3QgQ0EwHhcNMTgxMjE3MTYyNjQzWhcNMjQxMjE3MTYyNjQzWjBtMQswCQYDVQQGEwJMVDESMBAGA1UEYRMJMTg4Nzc4MzE1MTYwNAYDVQQKEy1Bc21lbnMgZG9rdW1lbnR1IGlzcmFzeW1vIGNlbnRyYXMgcHJpZSBMUiBWUk0xEjAQBgNVBAMTCUFESUMgQ0EtQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANNgLyqQ7JjzgW544HQFnfY48japK3k4PIHzg8GqsZ96jtn+zUJTNTlW/GVGWOZo9rLKI5i84dvasCCi0gNd39xCNRqbMPM7AsWappo6cCyl/cy+T1r5g2cI+T7QrQb8GRGlpIFeSR44hcqZHFECv4asFQelaw8UCiex9k5WTKZfwNSWDxJWcpVFIoPLehThNIQsK4cZylihMYmCAgwSdbRgwCAWMkFynG8hl6VEJwO/4wasyVhSkAjUbYoj4ACEIaA6Cr/HNaWM9BpF4GntWsyJ4nJqMQkOklwBUIgH9vaVsWRH95DJy1wOLypZBbDCa7EYjJUxqAKA+a6vMjyGolsCAwEAAaOCAaswggGnMA4GA1UdDwEB/wQEAwIBBjASBgkrBgEEAYI3FQEEBQIDAQABMCMGCSsGAQQBgjcVAgQWBBSYLZxHdxTQD6JPX1BEotg5K8Io7TAdBgNVHQ4EFgQUYpbcZMVf8JBEU79q1WAACu/0N7IwPQYDVR0gBDYwNDAyBgRVHSAAMCowKAYIKwYBBQUHAgEWHGh0dHA6Ly9uc2MudnJtLmx0L3JlcG9zaXRvcnkwGQYJKwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBSOtPSzSuc6D9Y//K6k/JzWzNx1xjA3BgNVHR8EMDAuMCygKqAohiZodHRwOi8vbnNjLnZybS5sdC9jZHAvQURJQ19Sb290X0NBLmNybDB4BggrBgEFBQcBAQRsMGowNAYIKwYBBQUHMAGGKGh0dHA6Ly9uc2MudnJtLmx0L09DU1Avb2NzcHJlc3BvbmRlci5uc2MwMgYIKwYBBQUHMAKGJmh0dHA6Ly9uc2MudnJtLmx0L2FpYS9BRElDX1Jvb3RfQ0EuY3J0MA0GCSqGSIb3DQEBCwUAA4ICAQCcggJ7lmXFld8QH35exHV66IObAEtJuW+53iBAsgxh4FVb8Ohb3jtTZnshRr0Vxz6srMsj1+9q4Uzwg2wCkZOw00nd5jwBQuCcax5zokuK/21u0MvrFHHsZhM3yKFMTOKkNxUbQ24wuvu7mkFaD5U/a6y0rG3JywcTozY+Xx6WH3jtw4V+DXtaiQpibD+k+9dY6wyHRXjPJVFOuIQyWKgTnA4OzC1ctU6EziLhEOTrLYauXnww0wcy729rtxFFJ2Pb+WjpUzAwDGDv5AyTZXId6OteCQS30xwtrg2Yumz2ha1kqSiDSxumcOd2SAnXw+dml6jkCsFwfoU8SWcFxMiERWBBLjX/GviVPoXD50Vh25RA5xBCKOLh7j4vCVbVuNbnwBsmzcgTwzw4QuWTwh4apHNfh+F4KhKtWGaTcKgptLr/5S6JYWbzgGzej+a10VNFrZ2K1Q6lUvGywA1qRnQoxFGhZpPrjDxZ9JMvEZcZlSPl9Tarn0t4Zf6/8+aSSx6WF6cOBWmIvNXqwCAP2u8TDU9jQL+b0QR3ct5vRryMGHNTx7Pvak8+/ATI4uhacmktwizwtCta3XRggPSJtgWmNKvnr81ULkY3g2m22G9weCuXXypjSt++49yX/eJ6sQ35mkIcsYF1ycluGMTFMLX38IIWybK8wJ1fqECUBYWSFg==";
        String ocspTokenB64 = "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";

        ExternalResourcesOCSPSource ocspSource = new ExternalResourcesOCSPSource(new InMemoryDocument(Utils.fromBase64(ocspTokenB64)));
        List<RevocationToken<OCSP>> revocationTokens = ocspSource.getRevocationTokens(DSSUtils.loadCertificateFromBase64EncodedString(certB64), DSSUtils.loadCertificateFromBase64EncodedString(caCertB64));
        assertEquals(1, revocationTokens.size());

        RevocationToken<OCSP> ocspToken = revocationTokens.iterator().next();

        RevocationDataVerifier revocationDataVerifier = RevocationDataVerifier.createDefaultRevocationDataVerifier();
        assertFalse(revocationDataVerifier.isAcceptable(ocspToken)); // signed with SHA-1

        revocationDataVerifier.setAcceptableDigestAlgorithms(Collections.singleton(DigestAlgorithm.SHA1));
        assertTrue(revocationDataVerifier.isAcceptable(ocspToken));
    }

    @Test
    public void encryptionAlgorithmTest() {
        String certB64 = "MIID1DCCArygAwIBAgIBCjANBgkqhkiG9w0BAQsFADBNMRAwDgYDVQQDDAdnb29kLWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwHhcNMjEwNzAzMTI1MTQ0WhcNMjMwNTAzMTI1MTQ0WjBPMRIwEAYDVQQDDAlnb29kLXVzZXIxGTAXBgNVBAoMEE5vd2luYSBTb2x1dGlvbnMxETAPBgNVBAsMCFBLSS1URVNUMQswCQYDVQQGEwJMVTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAM/yDHvOV9Ju5wPnzpYOP+n02Af3lYsE9lfICMRAlYpySE97ty1Tk6/UJ6mw6vvsNMkBd2by0Kqx3/P5aXPkrXprguaRA+R5LgbRa0fWJMhrjmPE4qCNHJ6qZyRe7oxE3ovzX+voNt+bvncs0TtNvXXkUZ02rS28wf7gOIVc8z0GPAqN7ccw1eUQ/lVmfmuDTa5Ftn2bbuwp8Y3LwxTDxKITHgMMA2BNFcFo9f5DgQ0gqyTwPhJHKLXkxB1hwNTtuFzVI3+UBv3dI5Xe3F0pjlPLjjj/25gsTWe5vAIljQVR5ATlT82GtbhfbRB+T1SoRmODGEiKTilkxGEaWOpvKcsCAwEAAaOBvDCBuTAOBgNVHQ8BAf8EBAMCBkAwgYcGCCsGAQUFBwEBBHsweTA5BggrBgEFBQcwAYYtaHR0cDovL2Rzcy5ub3dpbmEubHUvcGtpLWZhY3Rvcnkvb2NzcC9nb29kLWNhMDwGCCsGAQUFBzAChjBodHRwOi8vZHNzLm5vd2luYS5sdS9wa2ktZmFjdG9yeS9jcnQvZ29vZC1jYS5jcnQwHQYDVR0OBBYEFHCHitKwTKLLmAH4oK8ZoA21kfztMA0GCSqGSIb3DQEBCwUAA4IBAQBmLhBm5s2VqW2XQcXH4oWbc+IV0Tafhnh8nWpNDGlYNlh1GPuNrrs4zDcYrmgMH5BrtBw5/HAJUZjRLYyBQBxjAdtBtHgcoIzv/QbSVStuJdVIEJyFB8mPSzOEAYJSdwF9ciwkdjgA+fMczova37zIrLxLTw+qkxsXYrddWDA08koo15Gsug5OyfQbGvsx1ctag4IelUAeXkXSodOaZxroRJzNXE32xFz9GQwVqBxyTMFyEfo3g5lwGnhGilopksBoStoTKZXXUkqyg1TVULEA7ppq0KPgWgeYCO1xKX6hediDnwKf1oWQXMtS3+34fh8HuDKpXHSbVmsC26cxhIre";
        String caCertB64 = "MIID6jCCAtKgAwIBAgIBBDANBgkqhkiG9w0BAQsFADBNMRAwDgYDVQQDDAdyb290LWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwHhcNMjEwNzAzMTI1MTQzWhcNMjMwNTAzMTI1MTQzWjBNMRAwDgYDVQQDDAdnb29kLWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCxf8STorHasImct8bY+CFmxdm7JaM1/4peMPOs2FTgjq3OnbILB7wXYznGpbJqNGVLV0bWFrgbKeQcOU1xFta4HJxVH9a5CdO1g7HiYTCLOKD/4fKSlw5xWB+oD0Tgs8R56Kp3esBiQ2uFZ6X18XM7SbXZof4P7qu1TkosKvVXNkI70g4pajt4z5dNwruGHpKgVx5o31MBYRdNYQ918OS0NXPhP9N/U8P/v2Fx3W/sohn1nISKBYDOxHYSfQks2zdjJ/A+i/5hodPkijkmTAP0oCcvIymUkeoJxTqpAFwCvj3I+ZT7LWr1ESfi/ZU0pUAcipz96L7vX8+/9GdH/GV1AgMBAAGjgdQwgdEwDgYDVR0PAQH/BAQDAgEGMEEGA1UdHwQ6MDgwNqA0oDKGMGh0dHA6Ly9kc3Mubm93aW5hLmx1L3BraS1mYWN0b3J5L2NybC9yb290LWNhLmNybDBMBggrBgEFBQcBAQRAMD4wPAYIKwYBBQUHMAKGMGh0dHA6Ly9kc3Mubm93aW5hLmx1L3BraS1mYWN0b3J5L2NydC9yb290LWNhLmNydDAdBgNVHQ4EFgQUqvu5WABNumd2cDVEWyzGnvihBOkwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAUa1Vot6evQWOJqxqKpM5T1tK/DPMfEPpWISaeOHn0RHKKGMgwct2uTpQhd+CoD7WAGJk41DKtDMSmz5Dkpj/Z7irWoSn55PtrnhA5xedGYgJAZzUYZoJqB2VqPgnUtaWWI+R5vhvuz6Ob8SFIdFb/k8qe4EbkTB9eA/UGKS9RjngepsqCHroXIGiJD/xvVz69iLADmwRBQdWx4N+ZXpF67YgiK2wHq9psE/S/ExMfZPXrrCf4bPagvgEUYE3ZKhUsUOJDk+gmVAYUa/V5ZBESMW+uiI/MqtyEMIysdwqW32EkaIEdunPj1VQY+m+SOlKs9jD/8b0KKL/hkRvTMhl4Q==";
        String ocspTokenB64 = "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";

        ExternalResourcesOCSPSource ocspSource = new ExternalResourcesOCSPSource(new InMemoryDocument(Utils.fromBase64(ocspTokenB64)));
        List<RevocationToken<OCSP>> revocationTokens = ocspSource.getRevocationTokens(DSSUtils.loadCertificateFromBase64EncodedString(certB64), DSSUtils.loadCertificateFromBase64EncodedString(caCertB64));
        assertEquals(1, revocationTokens.size());

        RevocationToken<OCSP> ocspToken = revocationTokens.iterator().next();

        RevocationDataVerifier revocationDataVerifier = RevocationDataVerifier.createDefaultRevocationDataVerifier();
        assertTrue(revocationDataVerifier.isAcceptable(ocspToken));

        revocationDataVerifier.setAcceptableEncryptionAlgorithmKeyLength(Collections.singletonMap(EncryptionAlgorithm.DSA, 128));
        assertFalse(revocationDataVerifier.isAcceptable(ocspToken));

        revocationDataVerifier.setAcceptableEncryptionAlgorithmKeyLength(Collections.singletonMap(EncryptionAlgorithm.RSA, 3000));
        assertFalse(revocationDataVerifier.isAcceptable(ocspToken));

        revocationDataVerifier.setAcceptableEncryptionAlgorithmKeyLength(Collections.singletonMap(EncryptionAlgorithm.RSA, 2048));
        assertTrue(revocationDataVerifier.isAcceptable(ocspToken));

        revocationDataVerifier.setAcceptableEncryptionAlgorithmKeyLength(Collections.singletonMap(EncryptionAlgorithm.RSA, 1900));
        assertTrue(revocationDataVerifier.isAcceptable(ocspToken));

        revocationDataVerifier.setAcceptableEncryptionAlgorithmKeyLength(Collections.singletonMap(EncryptionAlgorithm.RSA, 0));
        assertTrue(revocationDataVerifier.isAcceptable(ocspToken));
    }

    @Test
    public void expiredCertificateTest() {
        String certB64 = "MIIE1zCCAr+gAwIBAgIDTB3fMA0GCSqGSIb3DQEBCwUAME4xCzAJBgNVBAYTAkxVMRYwFAYDVQQKDA1MdXhUcnVzdCBTLkEuMScwJQYDVQQDDB5MdXhUcnVzdCBHbG9iYWwgUXVhbGlmaWVkIENBIDMwHhcNMjIwMjAyMTMzMTU0WhcNMjMwMjAyMTMzMTU0WjBeMQswCQYDVQQGEwJMVTEWMBQGA1UEChMNTHV4VHJ1c3QgUy5BLjETMBEGA1UECxMKUGtpIGVudGl0eTEiMCAGA1UEAxMZTHV4VHJ1c3QgUy5BLiBPQ1NQIFNlcnZlcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALXRJgqc3YegdIDHbBKRUSU3HJ9BneUEOgro2UuEiL5LzGMmShHPxSwwGNgAPCIsQdFrEipDfXzEf82ZMbh58xB4wJy/aKo+RniImvqZMy7TctHfi5PrloMvV1rR3AUuMyod5jAr0DTrVwfVBKHWn2f+dvI5Utelye8vVtc40o3UFvcLmrm8/+kS14tsoUyC8ybv1u33CrZOeFdjmdkYZsvtQcdH5kU8KEWiQlkRze54pwbYpkU3YolCqVvng37QUIkkaLtKimt39akJE8v4eSmJdd7d+7XXiC4NGnKPj8KtaXtVVggqji5FHaOdTE22Sv6nQofcX2CNts7k3ge6QysCAwEAAaOBrTCBqjATBgNVHSUEDDAKBggrBgEFBQcDCTAfBgNVHSMEGDAWgBRjj8KLA7GrjthTR5Ydmah99qyodTA4BgNVHR8EMTAvMC2gK6AphidodHRwOi8vY3JsLmx1eHRydXN0Lmx1L0xUR1FDQTMtT0NTUC5jcmwwHQYDVR0OBBYEFAgSTQgLkHHOjcK2da1yHo5lnnaWMA4GA1UdDwEB/wQEAwIHgDAJBgNVHRMEAjAAMA0GCSqGSIb3DQEBCwUAA4ICAQCdN3AmbWYNy0ZfU038pnOYXVsQ8KnVWZUht73/VFu/kaBix9IWSFfQ5y+duae9MkByi/TQbXk6mFYfCFfr2I3GaYAhyxtuWoCQg84BeqIASX3cNVrCABn8GIEsPsFDuUXXLFZ5uIY/uPjACB3AclbM4O9COD7CFVZAXCl/+CcC9M68AnfSf6zBIYnBM3QZde35IVj0Y5ZRg5DnC2zsICkIqCbQDoDSBVTWkdH20tA9zMEgLgZSk9W1ablOmRdo5+3HmHQ4+CN7Xxd3aoprAqsdlLpL8/PupDQ6dTL1VxfycQQEUodztmW7hRqg5mp87P0X9sbNXNVJCEzaa6LZlQ04FnA7uVIEntmqlOubyGpcbziX9mLrrPHcfUqEShA4h7hJmQK5paLkK/YDFDs6uZpnyRLv+7dT5l3fu5KvEEe75ZKzPfF+fNg8Iu9ADpcFLyHuUPlEqRW4KTEfmJK/RVAnUVbqFG1nlLSbSj658lCoJtJ597GuNEJ5nipAxH4PM6dE9+P0xBWvOFs1+xnplRYVnx+ElITfzHLRJVchTCw1SOcPll+Ro4qA/4IslarWpE8V388B7KMmsfMS6sSmWpEAQxjvruabSAc/baIzTbqXQFAVXzJWuBeYto2URIl6+3XA+Bca8hOkNBNUvIcAevg6oL24x1oLvB0av+RG8Ly3wA==";
        String caCertB64 = "MIIGcjCCBFqgAwIBAgIUQT3qGijCJThFVY4Efz4qi1ubrq4wDQYJKoZIhvcNAQELBQAwRjELMAkGA1UEBhMCTFUxFjAUBgNVBAoMDUx1eFRydXN0IFMuQS4xHzAdBgNVBAMMFkx1eFRydXN0IEdsb2JhbCBSb290IDIwHhcNMTUwMzA2MTQxMjE1WhcNMzUwMzA1MTMyMTU3WjBOMQswCQYDVQQGEwJMVTEWMBQGA1UECgwNTHV4VHJ1c3QgUy5BLjEnMCUGA1UEAwweTHV4VHJ1c3QgR2xvYmFsIFF1YWxpZmllZCBDQSAzMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAuZ5iXSmFbP80gWb0kieYsImcyIo3QYg+XA3NlwH6QtI0PgZEG9dSo8pM7VMIzE5zq8tgJ50HnPdYflvfhkEKvAW2NuNX6hi/6HK4Nye+kB+INjpfAHmLft3GT95e+frk/t7hJNorK44xzqfWZKLNGysEHIriddcePWOk3J/VMc9CsSemeZbmeZW1/xXeqolMS7JIDZ3+0DgVCYsKIK+b3sAQ8iqXbQlQyvymG6QyoQoJbuEP23iawRMWKNWk+sjzOkPAAQDtgEEVdggzzudLSM04C5CjeLlLYuXgljler9bKRk9wW8nkareLZsn9uCDihGXGyC5m9jseGY1KAnlV8usLjBFAiW5OCnzcOg+CPsVucoRhS6uvXcu7VtHRGo5yLysJVv7sj6cx5lMvQKAMLviVi3kphZKYfqVLAVFJpXTpunY2GayVGf/uOpzNoiSRpcxxYjmAlPKNeTgXVl5Mc0zojgT/MZTGFN7ov7n01yodN6OhfTADacvaKfj2C2CwdCJvMqvlUuCKrvuXbdZrtRm3BZXrghGhuQmG0Tir7VVCI0WZjVjyHs2rpUcCQ6+D1WymKhzp0mrXdaFzYRce7FrEk69JWzWVp/9/GKnnb0//camavEaI4V64MVxYAir5AL/j7d4JIOqhPPU14ajxmC6dEH84guVs0Lo/dwVTUzsCAwEAAaOCAU4wggFKMBIGA1UdEwEB/wQIMAYBAf8CAQAwQwYDVR0gBDwwOjA4BggrgSsBAQEKAzAsMCoGCCsGAQUFBwIBFh5odHRwczovL3JlcG9zaXRvcnkubHV4dHJ1c3QubHUwagYIKwYBBQUHAQEEXjBcMCsGCCsGAQUFBzABhh9odHRwOi8vbHRncm9vdC5vY3NwLmx1eHRydXN0Lmx1MC0GCCsGAQUFBzAChiFodHRwOi8vY2EubHV4dHJ1c3QubHUvTFRHUkNBMi5jcnQwDgYDVR0PAQH/BAQDAgEGMB8GA1UdIwQYMBaAFP8YKHb5SAUsoa7xKxsrslP4S3yzMDMGA1UdHwQsMCowKKAmoCSGImh0dHA6Ly9jcmwubHV4dHJ1c3QubHUvTFRHUkNBMi5jcmwwHQYDVR0OBBYEFGOPwosDsauO2FNHlh2ZqH32rKh1MA0GCSqGSIb3DQEBCwUAA4ICAQADB6M/edbOO9iJCOnVxayJ1NBk08/BVKlHwe7HBYAzT6Kmo3TbMUwOpcGI2e/NBCR3F4wTzXOVvFmvdBl7sdS6uMSLBTrav+5LChcFDBQj26X5VQDcXkA8b/u6J4Ve7CwoSesYg9H0fsJ3v12QrmGUUao9gbamKP1TFriO+XiIaDLYectruusRktIke9qy8MCpNSarZqr3oD3c/+N5D3lDlGpaz1IL8TpbubFEQHPCr6JiwR+qSqGRfxv8vIvOOAVxe7np5QhtwmCkXdMOPQ/XOOuEA06bez+zHkASX64at7dXru+4JUEbpijjMA+1jbFZr20OeBIQZL7oEst+FF8lFuvmucC9TS9QnlF28WJExvpIknjS7LhFMGXB9w380q38ZOuKjPZpoztYeyUpf8gxzV7fE5Q1okhnsDZ+12vBzBruzJcwtNuXyLyIh3fVN0LunVd+NP2kGjB2t9WD2Y0CaKxWx8snDdrSbAi46TpNoe04eroWgZOvdN0hEmf2d8tYBSJ/XZekU9sCAww5vxHnXJi6CZHhjt8f1mMhyE2gBvmpk4CFetViO2sG0n/nsxCQNpnclsax/eJuXmGiZ3OPCIRijI5gy3pLRgnbgLyktWoOkmT/gxtWDLfVZwEt52JL8d550KIgttyRqX81LJWGSDdpnzeRVQEnzAt6+RebAQ==";
        String crlTokenB64 = "MIIDBDCB7QIBATANBgkqhkiG9w0BAQsFADBOMQswCQYDVQQGEwJMVTEWMBQGA1UECgwNTHV4VHJ1c3QgUy5BLjEnMCUGA1UEAwweTHV4VHJ1c3QgR2xvYmFsIFF1YWxpZmllZCBDQSAzFw0yMTA2MTgwNDQ5MTlaFw0yMTA2MTgwOTE5MTlaoGswaTA5BgNVHRwBAf8ELzAtoCugKYYnaHR0cDovL2NybC5sdXh0cnVzdC5sdS9MVEdRQ0EzLU9DU1AuY3JsMAsGA1UdFAQEAgJjvjAfBgNVHSMEGDAWgBRjj8KLA7GrjthTR5Ydmah99qyodTANBgkqhkiG9w0BAQsFAAOCAgEArGXGqX6Km4r4wkTjnrTbVvTb/a0cQG3dXNYBzOhqe0/8C/22G9CHe5OniPLetlq/qBZrMdAWWlMk0WF2Xzd4xu+i2jn4U5e7WcKMC59b9v9453YZE3tBtKMGJ2uapevSxvgsAk25xjXT1pwhI7Aiqs9XLuTrJYIboTQKorwzYzWz5gdYsw41pdgvuu/OXZyNBVUXqCiDLPJdtSnOQEJwPUOnW8drk8mWlfe+7Ml8IJKbXzD0DP1fE8xXdgUshWiOd8cfM7KdpD2tViefMa9uXvDG3etH0bOu4dt09hU64s2mCmRlDWkcrIMH8+vmCXf8Fgx/cTk4hiKlVZBZzJBgPvQI+8FJhM77sQg6FjjaGoQLqUWYpKAVLynOjEw/POLT8H5WhBKC+/G5du+nSxCGgl/fcflkyIX9Wr144xQjyDK1CL935fnbFFavwXeCLxqM1MZML8lDltTCPTlxBtSBgRPRSOh5J9ibqAlwZvD/awwnix/UVUr1VXdTJSQR+5LDa4tpbUqQK7O+wMHA3Zrfo9/HWKhb2zcYLITVBDuwOKjelYNe2Lxg1jOzTclG4T9nSSTPEdchPvBlsqlnOwmle15Zu2/QSva+gfzHcbDmEwMzEwhiDz+7ndMkaiNCdIl8/KShC3l9B/pElI0wSJpSYNn1ILUcZbRe9sSr3eJjaOo=";

        ExternalResourcesCRLSource crlSource = new ExternalResourcesCRLSource(new InMemoryDocument(Utils.fromBase64(crlTokenB64)));
        List<RevocationToken<CRL>> revocationTokens = crlSource.getRevocationTokens(DSSUtils.loadCertificateFromBase64EncodedString(certB64), DSSUtils.loadCertificateFromBase64EncodedString(caCertB64));
        assertEquals(1, revocationTokens.size());

        RevocationToken<CRL> crlToken = revocationTokens.iterator().next();

        RevocationDataVerifier revocationDataVerifier = RevocationDataVerifier.createDefaultRevocationDataVerifier();
        assertFalse(revocationDataVerifier.isAcceptable(crlToken));
    }

    @Test
    public void expiredCertWithArchiveCutOffInOCSPTest() {
        String certB64 = "MIIEjTCCA3WgAwIBAgIQflgNfTAdhc8nw51IUz7WuDANBgkqhkiG9w0BAQsFADBuMQswCQYDVQQGEwJGUjEgMB4GA1UEChMXQ3J5cHRvbG9nIEludGVybmF0aW9uYWwxHDAaBgNVBAsTEzAwMDIgNDM5MTI5MTY0MDAwMjYxHzAdBgNVBAMTFlVuaXZlcnNpZ24gQ0EgaGFyZHdhcmUwHhcNMTMwNzA5MTQwOTQ0WhcNMTgwNzA5MTQwOTQ0WjBqMQswCQYDVQQGEwJGUjEgMB4GA1UEChMXQ1JZUFRPTE9HIElOVEVSTkFUSU9OQUwxFzAVBgNVBAsTDjAwMDIgNDM5MTI5MTY0MSAwHgYDVQQDExdDUllQVE9MT0cgSU5URVJOQVRJT05BTDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAK+wplgBufr7mNQm7z/ozGD3Feq8kATL7hCGj08nj4z2JBOfXCyv9WP2f+RIHEYvmqNl3LyF4kTnem6E/tNFEvmxnjrDfwk0jSiQxbr81jnGRpNb7iSAaaBsgPiAM9PLEuGwFFVR4P0GG6EtzLlwnxz+CF+fVa34mE9Wtk9ilAgcl7GQv/FUbTb0+Bf8VCv/yrKE7rMExrbCHPyBW0O1KnerP+lVpd1JBWoWb/bGKYi7XQjMpykvN2vtQ72CIA5PP1aEks/as25U3EDhu8diKId0Rn9eVR5KIwcvVQCJa3s28lm1hSa/zz2+55dfeu3pUoKJWQ+I0wYcP0uigiXbuKMCAwEAAaOCASkwggElMDsGCCsGAQUFBwEBBC8wLTArBggrBgEFBQcwAYYfaHR0cDovL3NjYWgub2NzcC51bml2ZXJzaWduLmV1LzBCBgNVHSAEOzA5MDcGCysGAQQB+0sFAQMCMCgwJgYIKwYBBQUHAgEWGmh0dHA6Ly9kb2NzLnVuaXZlcnNpZ24uZXUvMEQGA1UdHwQ9MDswOaA3oDWGM2h0dHA6Ly9jcmwudW5pdmVyc2lnbi5ldS91bml2ZXJzaWduX2NhX2hhcmR3YXJlLmNybDAMBgNVHRMBAf8EAjAAMA4GA1UdDwEB/wQEAwIGQDAdBgNVHQ4EFgQU/iV/FZgSuI/+U0KhBQZDynWZdDYwHwYDVR0jBBgwFoAUYOQw3e561NB+XSXZ/Tt7IWRP3bswDQYJKoZIhvcNAQELBQADggEBABRu6wfqT/vhiwgEfufWtObF5Ub6fu2kF+56GcJ3LHSQ8FGkKMUymR3XafL9LDes4peJ6eOAKJJEjP79t3+gGYI4JJUFV9hDxNbvqlsJGmDBX6iPOghmofREEPqy5pdwZK+PNDPwYVKEDHtkn5uO1UwsmyqjT6lQolzWDTRJNv16HN/fI85KTwF2k2oPmSpztBwpzJcY0qptOL2v/IDND8WjLfuElJt3AkYFL5LMBJ6Mp56GzvK2ZU9V2gzbP2jYAxlrojyWNw7oaPNQKt+41STE2uMi1ROUxuPyoJHs29TakSrjiD81VOF0Kgjn5sQsQus+2J5ap4dDMaWgS95hdIk=";
        String caCertB64 = "MIIEYTCCA0mgAwIBAgIQIVWN4tmvyrr2CIjMBjGC1zANBgkqhkiG9w0BAQsFADB2MQswCQYDVQQGEwJGUjEgMB4GA1UEChMXQ3J5cHRvbG9nIEludGVybmF0aW9uYWwxHDAaBgNVBAsTEzAwMDIgNDM5MTI5MTY0MDAwMjYxJzAlBgNVBAMTHlVuaXZlcnNpZ24gUHJpbWFyeSBDQSBoYXJkd2FyZTAeFw0xMjA2MTUxMjU2MjVaFw0yMjA2MTUxMjU2MjVaMG4xCzAJBgNVBAYTAkZSMSAwHgYDVQQKExdDcnlwdG9sb2cgSW50ZXJuYXRpb25hbDEcMBoGA1UECxMTMDAwMiA0MzkxMjkxNjQwMDAyNjEfMB0GA1UEAxMWVW5pdmVyc2lnbiBDQSBoYXJkd2FyZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKHfv76grtwK9PRFTBq4BDtmmLaaHDAqkj1wd0lHIN2QH1jM6hKWeS4U/wy8QuYtvw0aFxYxiMWzS/vrj0Sczv5hAt8reE1Eg1uQcx6+aSUBqJ6a+1TbM7PtkHg1ozgbmVXGuiOLyviLhhUo8XmeeGEhux+cyRNiYCs37VPN5OVrKks29dspMkvllkexfrxiPfc+gB58EU+iNEcip/YrZLu4ZqErlCePIVBLyX9skb7QwKXDW8XBIgAzpoBj0U9/4Vxaiyj209xT1Uuz2vKsuT8Hq7I1vt7miYviHg/ovsWXH6yGcNomxX55l0qWQ4z+mGlVhCLDPMKmspY5D+1kSqsCAwEAAaOB8jCB7zA7BgNVHSAENDAyMDAGBFUdIAAwKDAmBggrBgEFBQcCARYaaHR0cDovL2RvY3MudW5pdmVyc2lnbi5ldS8wEgYDVR0TAQH/BAgwBgEB/wIBADBMBgNVHR8ERTBDMEGgP6A9hjtodHRwOi8vY3JsLnVuaXZlcnNpZ24uZXUvdW5pdmVyc2lnbl9wcmltYXJ5X2NhX2hhcmR3YXJlLmNybDAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFGDkMN3uetTQfl0l2f07eyFkT927MB8GA1UdIwQYMBaAFE3Z/Kgtx8hapK1fSa5opNyeihIiMA0GCSqGSIb3DQEBCwUAA4IBAQAQrQJxwn+DBwN+KTt75IuOkaPOnZ+FfmF/1V7zDt3YNz7n1hRXlflbx9wBJn30TwyuTuZ/Cq1gEiA+TJMrsdZPKvagY8a/q7oCm6jYw6cBhopErwV/sZ9R3Ic+fphKSxoEnygpZs4uKMU2bB7nbul+sdJkP/OrIHKfHydMk3ayeAxnnieOj8EU+Z5w3fpekOGOtb4VUTESWU/xQfDZcNaauNRU2DYFi1eDypfVnyD8tORDoFVaAqzdIJuMJ06jJB5fnmNBXU7GOQFLcdK7hy3ZDmPNh5FNGnaQRrlY2st7lXfV3mu9AgHmjPjxrbAwgo1GzLRY0byI9bfitN0sLT+d";
        String ocspTokenB64 = "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";

        ExternalResourcesOCSPSource ocspSource = new ExternalResourcesOCSPSource(new InMemoryDocument(Utils.fromBase64(ocspTokenB64)));
        List<RevocationToken<OCSP>> revocationTokens = ocspSource.getRevocationTokens(DSSUtils.loadCertificateFromBase64EncodedString(certB64), DSSUtils.loadCertificateFromBase64EncodedString(caCertB64));
        assertEquals(1, revocationTokens.size());

        RevocationToken<OCSP> ocspToken = revocationTokens.iterator().next();

        RevocationDataVerifier revocationDataVerifier = RevocationDataVerifier.createDefaultRevocationDataVerifier();
        assertTrue(revocationDataVerifier.isAcceptable(ocspToken));
    }

    @Test
    public void ocspWithProvidedIssuerTest() {
        String certB64 = "MIIEuTCCA6GgAwIBAgIQZ+e7WiJWyzFPH8axcYYMdzANBgkqhkiG9w0BAQUFADBkMQswCQYDVQQGEwJFRTEiMCAGA1UECgwZQVMgU2VydGlmaXRzZWVyaW1pc2tlc2t1czEXMBUGA1UEAwwORVNURUlELVNLIDIwMTExGDAWBgkqhkiG9w0BCQEWCXBraUBzay5lZTAeFw0xMjAxMjUwOTA5MDVaFw0xNzAxMjMyMTU5NTlaMIGWMQswCQYDVQQGEwJFRTEPMA0GA1UECgwGRVNURUlEMRowGAYDVQQLDBFkaWdpdGFsIHNpZ25hdHVyZTEiMCAGA1UEAwwZU0lOSVZFRSxWRUlLTywzNjcwNjAyMDIxMDEQMA4GA1UEBAwHU0lOSVZFRTEOMAwGA1UEKgwFVkVJS08xFDASBgNVBAUTCzM2NzA2MDIwMjEwMIIBIzANBgkqhkiG9w0BAQEFAAOCARAAMIIBCwKCAQEAoP1UqXQG7xzE3USl9cGSzJmSYCyd8hKAUU/omzjblMDn+IQPcnLIj5bGgFXom1rdlfGWHQja9uglvHTN6jgZihdPikLZ9gkfYFdtxuB3uToBMpHxR6suywwuUQlRxd2dHZEsoCj0Ov6eIOLrYkepAsxysGfa3bsBd6/erAyLp3ym72kz/UWhivG9j+N37vHSpu5Jncfxe2iQmNCBLAhhw+QS7MnMLToscPk02Fd3V7DZ0REWJzkRoiIua2iArw779N3j0FfmfJcpH4dLoooukucxEScVKoSdm6cjUSDzUnLYR7sOKKWQUvWD7ZWQTLlk2wwVSp8Vzh8gTxgUe0xl3wIEBg/ZJaOCATEwggEtMAkGA1UdEwQCMAAwDgYDVR0PAQH/BAQDAgZAMFEGA1UdIARKMEgwRgYLKwYBBAHOHwEBAwIwNzASBggrBgEFBQcCAjAGGgRub25lMCEGCCsGAQUFBwIBFhVodHRwOi8vd3d3LnNrLmVlL2Nwcy8wIQYDVR0RBBowGIEWdmVpa28uc2luaXZlZUBlZXN0aS5lZTAdBgNVHQ4EFgQUEpLZ3fAMV49Q4+teYDMjR6IvcBAwGAYIKwYBBQUHAQMEDDAKMAgGBgQAjkYBATAfBgNVHSMEGDAWgBR7avJVUFy42XoIh0Gu+qIrPVtXdjBABgNVHR8EOTA3MDWgM6Axhi9odHRwOi8vd3d3LnNrLmVlL3JlcG9zaXRvcnkvY3Jscy9lc3RlaWQyMDExLmNybDANBgkqhkiG9w0BAQUFAAOCAQEABrCwlBJ51yuDtNBAlgh8+3s3Ps4KGbX9uH8J3Wvs3Ln7WGuDhNX18IV/QBICVBDsNrc0HNVRK9VMpQzvzmVgsSFnvC+osBkjt7nxjbiyJVM5xDsGGZAd69R8RlQ/5Ypb/HM5zc/zUTjHEio0e+NkLTn8dX/8RShrPhl+H71QnRyi8EStXLTJQG4beATBOhCa1wTSbWDGIzxBdk1a7fhz/4FH1jf7/V27Ag1eG2LDck7H0QTn/y3CBQn2vwBP10k52gSgjqTfQGultuIHD3ttUXw8DEWjKjhfQKgYR/0O7Wu0EUVhHPy4+t1hOj0DK20S/Auju05ZkFNgBtMePklzFg==";
        String caCertB64 = "MIIFBTCCA+2gAwIBAgIQKVKTqv2MxtRNgzCjwmRRDTANBgkqhkiG9w0BAQUFADB1MQswCQYDVQQGEwJFRTEiMCAGA1UECgwZQVMgU2VydGlmaXRzZWVyaW1pc2tlc2t1czEoMCYGA1UEAwwfRUUgQ2VydGlmaWNhdGlvbiBDZW50cmUgUm9vdCBDQTEYMBYGCSqGSIb3DQEJARYJcGtpQHNrLmVlMB4XDTExMDMxODEwMTQ1OVoXDTI0MDMxODEwMTQ1OVowZDELMAkGA1UEBhMCRUUxIjAgBgNVBAoMGUFTIFNlcnRpZml0c2VlcmltaXNrZXNrdXMxFzAVBgNVBAMMDkVTVEVJRC1TSyAyMDExMRgwFgYJKoZIhvcNAQkBFglwa2lAc2suZWUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCz6XxsZh6r/aXcNe3kSpNMOqmQoAXUpzzcr4ZSaGZh/7JHIiplvNi6tbW/lK7sAiRsb65KzMWROEauld66ggbDPga6kU97C+AXGu7+DROXstjUOv6VlrHZVAnLmIOkycpWaxjM+EfQPZuDxEbkw96B3/fG69Zbp3s9y6WEhwU5Y9IiQl8YTkGnNUxidQbON1BGQm+HVEsgTf22J6r6G3FsE07rnMNskNC3DjuLSCUKF4kH0rVGVK9BdiCdFaZjHEykjwjIGzqnyxyRKe4YbJ6B9ABm95eSFgMBHtZEYU+q0VUIQGhAGAurOTXjWi1TssA42mnLGQZEI5GXMXtabp51AgMBAAGjggGgMIIBnDASBgNVHRMBAf8ECDAGAQH/AgEAMA4GA1UdDwEB/wQEAwIBBjCB9gYDVR0gBIHuMIHrMIHoBgsrBgEEAc4fZAEBATCB2DCBsgYIKwYBBQUHAgIwgaUegaIASwBhAHMAdQB0AGEAdABhAGsAcwBlACAAaQBzAGkAawB1AHQAdAD1AGUAbgBkAGEAdgBhAGwAZQAgAGQAbwBrAHUAbQBlAG4AZABpAGwAZQAgAGsAYQBuAHQAYQB2AGEAdABlACAAcwBlAHIAdABpAGYAaQBrAGEAYQB0AGkAZABlACAAdgDkAGwAagBhAHMAdABhAG0AaQBzAGUAawBzAC4wIQYIKwYBBQUHAgEWFWh0dHBzOi8vd3d3LnNrLmVlL0NQUzAdBgNVHQ4EFgQUe2ryVVBcuNl6CIdBrvqiKz1bV3YwHwYDVR0jBBgwFoAUEvJaPupWHL/NBqzx8SXJqUvUFJkwPQYDVR0fBDYwNDAyoDCgLoYsaHR0cDovL3d3dy5zay5lZS9yZXBvc2l0b3J5L2NybHMvZWVjY3JjYS5jcmwwDQYJKoZIhvcNAQEFBQADggEBAKC4IN3FC2gVDIH05TNMgFrQOCGSnXhzoJclRLoQ81BCOXTZI4qn7N74FHEnrAy6uNG7SS5qANqSaPIL8dp63jg/L4qn4iWaB5q5GGJOV07SnTHS7gUrqChGClnUeHxiZbL13PkP37Lnc+TKl1SKfgtn5FbH5cqrhvbA/VF3Yzlimu+L7EVohW9HKxZ//z8kDn6ieiPFfZdTOov/0eXVLlxqklybUuS6LYRRDiqQupgBKQBTwNbC8x0UHX00HokW+dCVcQvsUbv4xLhRq/MvyTthE+RdbkrV0JuzbfZvADfj75nA3+ZAzFYS5ZpMOjZ9p4rQVKpzQTklrF0m6mkdcEo=";
        String ocspTokenB64 = "MIICkgoBAKCCAoswggKHBgkrBgEFBQcwAQEEggJ4MIICdDCCAVyhgaAwgZ0xCzAJBgNVBAYTAkVFMQ4wDAYDVQQIEwVIYXJqdTEQMA4GA1UEBxMHVGFsbGlubjEiMCAGA1UEChMZQVMgU2VydGlmaXRzZWVyaW1pc2tlc2t1czENMAsGA1UECxMET0NTUDEfMB0GA1UEAxMWU0sgT0NTUCBSRVNQT05ERVIgMjAxMTEYMBYGCSqGSIb3DQEJARYJcGtpQHNrLmVlGA8yMDE0MTAzMTE0MDgyMVowYDBeMEkwCQYFKw4DAhoFAAQUnyHMj5CIACqrWKRjcy9WIVkrNa4EFHtq8lVQXLjZegiHQa76ois9W1d2AhBn57taIlbLMU8fxrFxhgx3gAAYDzIwMTQxMDMxMTQwODIxWqFEMEIwQAYJKwYBBQUHMAECBDMwMTANBglghkgBZQMEAgEFAAQgg8VypfeQ3tarbkFeHcgGUrvyvp2o9tOn/2Y6rAahdbYwDQYJKoZIhvcNAQEFBQADggEBAGavCPResS8EQjC0Po/UDLdWEG01F0Yz+f+zRqllBrb1XCKRmzqVcfxWKb76SCO8fEsLVhwSk+C/M3YQkrXoHmZi6xAo2BB5yadxIzZUhGLy2LRZFwxgKVj0jR/jDE85KGE2cAl0JGw2cx92aG6DcB/NYyb9Dc7vZySSfYg/fSTSQercJdfa0aCQ98S/xroFw9O+xSwcV6EPxYp1rYxbldej5jCNwq0sFDvo46IttbCsH+LGIBe7GdlFXmlK1BwplGVlDyR3En820LZHyNqk++BGgz7YDsjNF6KYD5xHwrLeXiukvh5yL0bVQ4xYZRWGyIvg5jt0VgRy89KQ5fNdkkY=";
        String ocspIssuerB64 = "MIIEvDCCA6SgAwIBAgIQcpyVmdruRVxNgzI3N/NZQTANBgkqhkiG9w0BAQUFADB1MQswCQYDVQQGEwJFRTEiMCAGA1UECgwZQVMgU2VydGlmaXRzZWVyaW1pc2tlc2t1czEoMCYGA1UEAwwfRUUgQ2VydGlmaWNhdGlvbiBDZW50cmUgUm9vdCBDQTEYMBYGCSqGSIb3DQEJARYJcGtpQHNrLmVlMB4XDTExMDMxODEwMjE0M1oXDTI0MDMxODEwMjE0M1owgZ0xCzAJBgNVBAYTAkVFMQ4wDAYDVQQIEwVIYXJqdTEQMA4GA1UEBxMHVGFsbGlubjEiMCAGA1UEChMZQVMgU2VydGlmaXRzZWVyaW1pc2tlc2t1czENMAsGA1UECxMET0NTUDEfMB0GA1UEAxMWU0sgT0NTUCBSRVNQT05ERVIgMjAxMTEYMBYGCSqGSIb3DQEJARYJcGtpQHNrLmVlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAihvGyhMVrgReHluKln1za6gvCE/mlSREmWjJFpL9llvuEUZoPFIypYA8g5u1VfgkeW5gDq25jAOq4FyXeDGIa+pJn2h0o2Wc2aeppVG/emfGm/jA8jjeyMrwH8fAJrqVQ7c9X2xSwJEch/P2d8CfMZt5YF6gqLtPvG1b+n6otBZA5wjIFfJ/inJBMUvqHSz3+PLfxO2/T3Wyk/c8M9HIMqTelqyiMGRgWehiU1OsL9armv3dQrHs1wm6vHaxfpfWB9YAFpeo9aYqhPCxVt/zo2NQB6vxyZS0hsOrXL7SxRToOJaqsnvlbf0erPPFtRHUvbojYYgl+fzlz0Jt6QJoNwIDAQABo4IBHTCCARkwEwYDVR0lBAwwCgYIKwYBBQUHAwkwHQYDVR0OBBYEFKWhSGFt537NmJ50nCm7vYrecgxZMIGCBgNVHSAEezB5MHcGCisGAQQBzh8EAQIwaTA+BggrBgEFBQcCAjAyHjAAUwBLACAAdABpAG0AZQAgAHMAdABhAG0AcABpAG4AZwAgAHAAbwBsAGkAYwB5AC4wJwYIKwYBBQUHAgEWG2h0dHBzOi8vd3d3LnNrLmVlL2FqYXRlbXBlbDAfBgNVHSMEGDAWgBQS8lo+6lYcv80GrPHxJcmpS9QUmTA9BgNVHR8ENjA0MDKgMKAuhixodHRwOi8vd3d3LnNrLmVlL3JlcG9zaXRvcnkvY3Jscy9lZWNjcmNhLmNybDANBgkqhkiG9w0BAQUFAAOCAQEAw2sKwvTHtYGtD8Jw9mNUuj/mWiBSBEBeY2LhW8V6tjBPAPp3s6iWOh0FbVR2LUyrqRwgT3fyWiGsiDm/6cIqM+IblLp/8ztfRQjquhW6XCD9SK02OQ9ZSdBwcmoAApZLGXQC34wdgmV/hLTTNxONnDACBKz9U+Dy9a4ZT4tpNkbH8jq/BMne8FzbvRt1bjpXBP7gjLX+zdx8/hp0Wq4tD+f9NVX0+vm9ahEKuzx4QzPnSB7hhWM9OnLZT7noRQa+KWk5c+e5VoR5R2t7MjVl8Cd+2llxiSxqMSbU5/23BzAKgN+NQdrBZAzpZ7lfaAuLFaICP+bAm6uW2JUrM6abOw==";

        ExternalResourcesOCSPSource ocspSource = new ExternalResourcesOCSPSource(new InMemoryDocument(Utils.fromBase64(ocspTokenB64)));
        List<RevocationToken<OCSP>> revocationTokens = ocspSource.getRevocationTokens(DSSUtils.loadCertificateFromBase64EncodedString(certB64), DSSUtils.loadCertificateFromBase64EncodedString(caCertB64));
        assertEquals(1, revocationTokens.size());

        RevocationToken<OCSP> ocspToken = revocationTokens.iterator().next();

        RevocationDataVerifier revocationDataVerifier = RevocationDataVerifier.createDefaultRevocationDataVerifier();
        assertFalse(revocationDataVerifier.isAcceptable(ocspToken));

        CertificateToken ocspIssuerToken = DSSUtils.loadCertificateFromBase64EncodedString(ocspIssuerB64);
        assertFalse(revocationDataVerifier.isAcceptable(ocspToken, ocspIssuerToken));

        revocationDataVerifier.setAcceptableDigestAlgorithms(Collections.singleton(DigestAlgorithm.SHA1));
        assertTrue(revocationDataVerifier.isAcceptable(ocspToken, ocspIssuerToken));

        assertFalse(revocationDataVerifier.isAcceptable(ocspToken));
    }

    @Test
    public void digestAlgorithmWithValidationPolicyTest() throws Exception {
        String certB64 = "MIIFQDCCBCigAwIBAgIOGCB2t4Cg4gEAAQAOEN4wDQYJKoZIhvcNAQELBQAwbTELMAkGA1UEBhMCTFQxEjAQBgNVBGETCTE4ODc3ODMxNTE2MDQGA1UEChMtQXNtZW5zIGRva3VtZW50dSBpc3Jhc3ltbyBjZW50cmFzIHByaWUgTFIgVlJNMRIwEAYDVQQDEwlBRElDIENBLUEwHhcNMTkwMTE1MDc1MDUwWhcNMjIwMTE0MDc1MDUwWjBlMQswCQYDVQQGEwJMVDEaMBgGA1UEAwwRQURPTUFTIEJJUsWgVFVOQVMxEzARBgNVBAQMCkJJUsWgVFVOQVMxDzANBgNVBCoTBkFET01BUzEUMBIGA1UEBRMLMzgwMDMxMzA2OTMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCpBBVaIBn1jxl44uuvkJWkW5F3rtoUsmAkMJPlPyzQOg87h07uYOIJk4YDIpvujDaL3y3RAy7ARFWpY31zn0b0TnMkDyuf5JYtro6ZpR3v/wijVUNYyGZYpbc42WVNVp/AYuE6IJ7ecE1dMMJDHVkJAmoH2wnT+Lnqp71n51luYc5v0VP+OFmPqPzuSbiwXewOg8PHARkv9l8d0FnoUmKg5xpm+jbjCFsOC77hkwjUDQxu9Yv7p+T1X7+se46GDOm287i2iW66bZYu4qy6ycrznNuwWLtU1i5Z7ypoNGJ++IRn4wP80CvwzUo5TNcLD8Ql3PaDs8GPKXfpBz2zd4MBAgMBAAGjggHkMIIB4DBLBgNVHQkERDBCMA8GCCsGAQUFBwkDMQMTAU0wHQYIKwYBBQUHCQExERgPMTk4MDAzMTMxMjAwMDBaMBAGCCsGAQUFBwkEMQQTAkxUMB0GA1UdDgQWBBSkKwML7BV258Cpil5bewoD6itogjAOBgNVHQ8BAf8EBAMCBsAwHwYDVR0jBBgwFoAUYpbcZMVf8JBEU79q1WAACu/0N7IweAYIKwYBBQUHAQEEbDBqMDQGCCsGAQUFBzABhihodHRwOi8vbnNjLnZybS5sdC9PQ1NQL29jc3ByZXNwb25kZXIubnNjMDIGCCsGAQUFBzAChiZodHRwOi8vbnNjLnZybS5sdC9haWEvQURJQ19DQS1BKDEpLmNydDAVBgNVHSUEDjAMBgorBgEEAYI3CgMMMEQGA1UdIAQ9MDswOQYLKwYBBAGChlUCAgIwKjAoBggrBgEFBQcCARYcaHR0cDovL25zYy52cm0ubHQvcmVwb3NpdG9yeTAdBgkrBgEEAYI3FQoEEDAOMAwGCisGAQQBgjcKAwwwSwYIKwYBBQUHAQMEPzA9MAgGBgQAjkYBATAIBgYEAI5GAQQwJwYGBACORgEFMB0wGxYVaHR0cDovL25zYy52cm0ubHQvcGRzEwJlbjANBgkqhkiG9w0BAQsFAAOCAQEAIHcOUDrDtW1cJVkCsKpdniYpBBoZfmwX0VIM+mTevRb/dCTMyHHp+DkfauWXEGUEkl+PoZb8r9hoYcBWYvbIXbSEPnoRX26BLXeNGKz4LxqoqoHRqDFSOr7+7uFkhIwalM5mjc9c/oOJZu5xTALH/TCSRD4TVp48/+UiII/JpC+700N8oNbPkJUoKBpfRFcD89WGlvywrGYyD1nPoSn+KF7lmxenl+KEJKE6q0UdzV9kbzkk7BlksiUL9U9D0c7emx6pRk1Mw7fqTVD/ETGqmKVR6lzIQcY/GLQ55W968FrovU6F7TP/7qW8ahYzdM09sEnoIeG5jet3mYVHPEyGMA==";
        String caCertB64 = "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";
        String ocspTokenB64 = "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";

        ExternalResourcesOCSPSource ocspSource = new ExternalResourcesOCSPSource(new InMemoryDocument(Utils.fromBase64(ocspTokenB64)));
        List<RevocationToken<OCSP>> revocationTokens = ocspSource.getRevocationTokens(DSSUtils.loadCertificateFromBase64EncodedString(certB64), DSSUtils.loadCertificateFromBase64EncodedString(caCertB64));
        assertEquals(1, revocationTokens.size());

        RevocationToken<OCSP> ocspToken = revocationTokens.iterator().next();

        ValidationPolicy validationPolicy = ValidationPolicyFacade.newFacade().getDefaultValidationPolicy();
        CryptographicConstraint cryptographic = validationPolicy.getCryptographic();
        cryptographic.setLevel(Level.IGNORE);

        RevocationDataVerifier revocationDataVerifier = RevocationDataVerifier.createRevocationDataVerifierFromPolicy(validationPolicy);
        assertTrue(revocationDataVerifier.isAcceptable(ocspToken));

        validationPolicy = ValidationPolicyFacade.newFacade().getDefaultValidationPolicy();
        cryptographic = validationPolicy.getCryptographic();
        cryptographic.setLevel(Level.FAIL);

        ListAlgo acceptableDigestAlgo = cryptographic.getAcceptableDigestAlgo();
        acceptableDigestAlgo.getAlgos().clear();

        revocationDataVerifier = RevocationDataVerifier.createRevocationDataVerifierFromPolicy(validationPolicy);
        assertFalse(revocationDataVerifier.isAcceptable(ocspToken)); // SHA-1

        AlgoExpirationDate algoExpirationDate = cryptographic.getAlgoExpirationDate();
        algoExpirationDate.setFormat("yyyy");

        Algo algo = new Algo();
        algo.setValue("SHA1");
        algo.setDate("2009");
        acceptableDigestAlgo.getAlgos().add(algo);
        algoExpirationDate.getAlgos().add(algo);

        revocationDataVerifier = RevocationDataVerifier.createRevocationDataVerifierFromPolicy(validationPolicy);
        assertFalse(revocationDataVerifier.isAcceptable(ocspToken));

        Calendar calendar = Calendar.getInstance();
        calendar.setTime(new Date());
        calendar.set(Calendar.YEAR, 2000);

        revocationDataVerifier = RevocationDataVerifier.createRevocationDataVerifierFromPolicyWithTime(validationPolicy, calendar.getTime());
        assertTrue(revocationDataVerifier.isAcceptable(ocspToken));

        CryptographicConstraint cryptographicRevocationConstraint = validationPolicy.getRevocationConstraints()
                .getBasicSignatureConstraints().getCryptographic();

        cryptographicRevocationConstraint.getAcceptableDigestAlgo().getAlgos().clear();

        revocationDataVerifier = RevocationDataVerifier.createRevocationDataVerifierFromPolicyWithTime(validationPolicy, calendar.getTime());
        assertFalse(revocationDataVerifier.isAcceptable(ocspToken));
    }

    @Test
    public void encryptionAlgorithmWithValidationPolicyTest() throws Exception {
        String certB64 = "MIID1DCCArygAwIBAgIBCjANBgkqhkiG9w0BAQsFADBNMRAwDgYDVQQDDAdnb29kLWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwHhcNMjEwNzAzMTI1MTQ0WhcNMjMwNTAzMTI1MTQ0WjBPMRIwEAYDVQQDDAlnb29kLXVzZXIxGTAXBgNVBAoMEE5vd2luYSBTb2x1dGlvbnMxETAPBgNVBAsMCFBLSS1URVNUMQswCQYDVQQGEwJMVTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAM/yDHvOV9Ju5wPnzpYOP+n02Af3lYsE9lfICMRAlYpySE97ty1Tk6/UJ6mw6vvsNMkBd2by0Kqx3/P5aXPkrXprguaRA+R5LgbRa0fWJMhrjmPE4qCNHJ6qZyRe7oxE3ovzX+voNt+bvncs0TtNvXXkUZ02rS28wf7gOIVc8z0GPAqN7ccw1eUQ/lVmfmuDTa5Ftn2bbuwp8Y3LwxTDxKITHgMMA2BNFcFo9f5DgQ0gqyTwPhJHKLXkxB1hwNTtuFzVI3+UBv3dI5Xe3F0pjlPLjjj/25gsTWe5vAIljQVR5ATlT82GtbhfbRB+T1SoRmODGEiKTilkxGEaWOpvKcsCAwEAAaOBvDCBuTAOBgNVHQ8BAf8EBAMCBkAwgYcGCCsGAQUFBwEBBHsweTA5BggrBgEFBQcwAYYtaHR0cDovL2Rzcy5ub3dpbmEubHUvcGtpLWZhY3Rvcnkvb2NzcC9nb29kLWNhMDwGCCsGAQUFBzAChjBodHRwOi8vZHNzLm5vd2luYS5sdS9wa2ktZmFjdG9yeS9jcnQvZ29vZC1jYS5jcnQwHQYDVR0OBBYEFHCHitKwTKLLmAH4oK8ZoA21kfztMA0GCSqGSIb3DQEBCwUAA4IBAQBmLhBm5s2VqW2XQcXH4oWbc+IV0Tafhnh8nWpNDGlYNlh1GPuNrrs4zDcYrmgMH5BrtBw5/HAJUZjRLYyBQBxjAdtBtHgcoIzv/QbSVStuJdVIEJyFB8mPSzOEAYJSdwF9ciwkdjgA+fMczova37zIrLxLTw+qkxsXYrddWDA08koo15Gsug5OyfQbGvsx1ctag4IelUAeXkXSodOaZxroRJzNXE32xFz9GQwVqBxyTMFyEfo3g5lwGnhGilopksBoStoTKZXXUkqyg1TVULEA7ppq0KPgWgeYCO1xKX6hediDnwKf1oWQXMtS3+34fh8HuDKpXHSbVmsC26cxhIre";
        String caCertB64 = "MIID6jCCAtKgAwIBAgIBBDANBgkqhkiG9w0BAQsFADBNMRAwDgYDVQQDDAdyb290LWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwHhcNMjEwNzAzMTI1MTQzWhcNMjMwNTAzMTI1MTQzWjBNMRAwDgYDVQQDDAdnb29kLWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCxf8STorHasImct8bY+CFmxdm7JaM1/4peMPOs2FTgjq3OnbILB7wXYznGpbJqNGVLV0bWFrgbKeQcOU1xFta4HJxVH9a5CdO1g7HiYTCLOKD/4fKSlw5xWB+oD0Tgs8R56Kp3esBiQ2uFZ6X18XM7SbXZof4P7qu1TkosKvVXNkI70g4pajt4z5dNwruGHpKgVx5o31MBYRdNYQ918OS0NXPhP9N/U8P/v2Fx3W/sohn1nISKBYDOxHYSfQks2zdjJ/A+i/5hodPkijkmTAP0oCcvIymUkeoJxTqpAFwCvj3I+ZT7LWr1ESfi/ZU0pUAcipz96L7vX8+/9GdH/GV1AgMBAAGjgdQwgdEwDgYDVR0PAQH/BAQDAgEGMEEGA1UdHwQ6MDgwNqA0oDKGMGh0dHA6Ly9kc3Mubm93aW5hLmx1L3BraS1mYWN0b3J5L2NybC9yb290LWNhLmNybDBMBggrBgEFBQcBAQRAMD4wPAYIKwYBBQUHMAKGMGh0dHA6Ly9kc3Mubm93aW5hLmx1L3BraS1mYWN0b3J5L2NydC9yb290LWNhLmNydDAdBgNVHQ4EFgQUqvu5WABNumd2cDVEWyzGnvihBOkwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAUa1Vot6evQWOJqxqKpM5T1tK/DPMfEPpWISaeOHn0RHKKGMgwct2uTpQhd+CoD7WAGJk41DKtDMSmz5Dkpj/Z7irWoSn55PtrnhA5xedGYgJAZzUYZoJqB2VqPgnUtaWWI+R5vhvuz6Ob8SFIdFb/k8qe4EbkTB9eA/UGKS9RjngepsqCHroXIGiJD/xvVz69iLADmwRBQdWx4N+ZXpF67YgiK2wHq9psE/S/ExMfZPXrrCf4bPagvgEUYE3ZKhUsUOJDk+gmVAYUa/V5ZBESMW+uiI/MqtyEMIysdwqW32EkaIEdunPj1VQY+m+SOlKs9jD/8b0KKL/hkRvTMhl4Q==";
        String ocspTokenB64 = "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";

        ExternalResourcesOCSPSource ocspSource = new ExternalResourcesOCSPSource(new InMemoryDocument(Utils.fromBase64(ocspTokenB64)));
        List<RevocationToken<OCSP>> revocationTokens = ocspSource.getRevocationTokens(DSSUtils.loadCertificateFromBase64EncodedString(certB64), DSSUtils.loadCertificateFromBase64EncodedString(caCertB64));
        assertEquals(1, revocationTokens.size());

        RevocationToken<OCSP> ocspToken = revocationTokens.iterator().next();

        ValidationPolicy validationPolicy = ValidationPolicyFacade.newFacade().getDefaultValidationPolicy();
        CryptographicConstraint cryptographic = validationPolicy.getCryptographic();
        cryptographic.setLevel(Level.IGNORE);

        RevocationDataVerifier revocationDataVerifier = RevocationDataVerifier.createRevocationDataVerifierFromPolicy(validationPolicy);
        assertTrue(revocationDataVerifier.isAcceptable(ocspToken));

        validationPolicy = ValidationPolicyFacade.newFacade().getDefaultValidationPolicy();
        cryptographic = validationPolicy.getCryptographic();
        cryptographic.setLevel(Level.FAIL);

        ListAlgo acceptableEncryptionAlgo = cryptographic.getAcceptableEncryptionAlgo();
        acceptableEncryptionAlgo.getAlgos().clear();

        revocationDataVerifier = RevocationDataVerifier.createRevocationDataVerifierFromPolicy(validationPolicy);
        assertFalse(revocationDataVerifier.isAcceptable(ocspToken));

        Algo algo = new Algo();
        algo.setValue("RSA");
        acceptableEncryptionAlgo.getAlgos().add(algo);

        revocationDataVerifier = RevocationDataVerifier.createRevocationDataVerifierFromPolicy(validationPolicy);
        assertTrue(revocationDataVerifier.isAcceptable(ocspToken));

        ListAlgo miniPublicKeySize = cryptographic.getMiniPublicKeySize();
        miniPublicKeySize.getAlgos().clear();

        revocationDataVerifier = RevocationDataVerifier.createRevocationDataVerifierFromPolicy(validationPolicy);
        assertFalse(revocationDataVerifier.isAcceptable(ocspToken));

        algo.setSize(3000);
        miniPublicKeySize.getAlgos().add(algo);

        revocationDataVerifier = RevocationDataVerifier.createRevocationDataVerifierFromPolicy(validationPolicy);
        assertFalse(revocationDataVerifier.isAcceptable(ocspToken));

        algo.setSize(1900);

        revocationDataVerifier = RevocationDataVerifier.createRevocationDataVerifierFromPolicy(validationPolicy);
        assertTrue(revocationDataVerifier.isAcceptable(ocspToken));

        AlgoExpirationDate algoExpirationDate = cryptographic.getAlgoExpirationDate();
        algoExpirationDate.setFormat("yyyy");

        algo.setDate("2025");
        algoExpirationDate.getAlgos().add(algo);
        Calendar calendar = Calendar.getInstance();
        calendar.set(2024, Calendar.JANUARY, 1);

        revocationDataVerifier = RevocationDataVerifier.createRevocationDataVerifierFromPolicyWithTime(validationPolicy, calendar.getTime());
        assertTrue(revocationDataVerifier.isAcceptable(ocspToken));

        algo.setDate("2015");

        revocationDataVerifier = RevocationDataVerifier.createRevocationDataVerifierFromPolicyWithTime(validationPolicy, calendar.getTime());
        assertFalse(revocationDataVerifier.isAcceptable(ocspToken));

        calendar = Calendar.getInstance();
        calendar.setTime(new Date());
        calendar.set(Calendar.YEAR, 2000);

        revocationDataVerifier.setAcceptableEncryptionAlgorithmKeyLength(Collections.singletonMap(EncryptionAlgorithm.RSA, 2048));
        assertTrue(revocationDataVerifier.isAcceptable(ocspToken));

        CryptographicConstraint cryptographicRevocationConstraint = validationPolicy.getRevocationConstraints()
                .getBasicSignatureConstraints().getCryptographic();

        cryptographicRevocationConstraint.getAcceptableEncryptionAlgo().getAlgos().clear();

        revocationDataVerifier = RevocationDataVerifier.createRevocationDataVerifierFromPolicyWithTime(validationPolicy, calendar.getTime());
        assertFalse(revocationDataVerifier.isAcceptable(ocspToken));
    }

}
