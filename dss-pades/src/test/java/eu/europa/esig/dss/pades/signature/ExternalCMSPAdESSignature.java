package eu.europa.esig.dss.pades.signature;

import static org.junit.Assert.assertNotNull;

import org.bouncycastle.cms.CMSProcessableByteArray;
import org.bouncycastle.cms.CMSSignedData;
import org.bouncycastle.cms.CMSSignedDataGenerator;
import org.bouncycastle.cms.SignerInfoGeneratorBuilder;
import org.junit.Before;

import eu.europa.esig.dss.cades.CMSUtils;
import eu.europa.esig.dss.cades.signature.CustomContentSigner;
import eu.europa.esig.dss.enumerations.SignatureAlgorithm;
import eu.europa.esig.dss.enumerations.SignatureLevel;
import eu.europa.esig.dss.model.DSSDocument;
import eu.europa.esig.dss.model.InMemoryDocument;
import eu.europa.esig.dss.model.SignatureValue;
import eu.europa.esig.dss.model.ToBeSigned;
import eu.europa.esig.dss.pades.PAdESSignatureParameters;
import eu.europa.esig.dss.signature.DocumentSignatureService;
import eu.europa.esig.dss.spi.DSSASN1Utils;
import eu.europa.esig.dss.validation.CertificateVerifier;

public class ExternalCMSPAdESSignature extends AbstractPAdESTestSignature {

	private PAdESSignatureParameters signatureParameters;
	private DSSDocument documentToSign;

	@Before
	public void init() throws Exception {
		documentToSign = new InMemoryDocument(PAdESLevelB.class.getResourceAsStream("/sample.pdf"));

		signatureParameters = new PAdESSignatureParameters();
		signatureParameters.setSigningCertificate(getSigningCert());
		signatureParameters.setCertificateChain(getCertificateChain());
		signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);
		signatureParameters.setLocation("Luxembourg");
		signatureParameters.setReason("DSS testing");
		signatureParameters.setContactInfo("Jira");
	}

	@Override
	protected DSSDocument sign() {
		ExternalCMSPAdESService service = new ExternalCMSPAdESService(getOfflineCertificateVerifier());
		byte[] documentDigest = service.computeDocumentDigest(documentToSign, signatureParameters);
		assertNotNull(documentDigest);

		// Embedded CAdES is generated by a third party
		byte[] cmsSignedData = getSignedCMSignedData(documentDigest);
		assertNotNull(cmsSignedData);

		// Stateless
		service = new ExternalCMSPAdESService(getOfflineCertificateVerifier());
		service.setCmsSignedData(cmsSignedData);
		return service.signDocument(documentToSign, signatureParameters, null);
	}

	/**
	 * Computes a CAdES with specific things for PAdES
	 */
	private byte[] getSignedCMSignedData(byte[] documentDigest) {
		CMSProcessableByteArray content = new CMSProcessableByteArray(documentDigest);

		PadesCMSSignedDataBuilder padesCMSSignedDataBuilder = new PadesCMSSignedDataBuilder(getOfflineCertificateVerifier());
		SignatureAlgorithm signatureAlgorithm = signatureParameters.getSignatureAlgorithm();

		CustomContentSigner customContentSigner = new CustomContentSigner(signatureAlgorithm.getJCEId());
		SignerInfoGeneratorBuilder signerInfoGeneratorBuilder = padesCMSSignedDataBuilder.getSignerInfoGeneratorBuilder(signatureParameters, documentDigest);

		CMSSignedDataGenerator generator = padesCMSSignedDataBuilder.createCMSSignedDataGenerator(signatureParameters, customContentSigner,
				signerInfoGeneratorBuilder, null);

		CMSUtils.generateDetachedCMSSignedData(generator, content);

		SignatureValue signatureValue = getToken().sign(new ToBeSigned(customContentSigner.getOutputStream().toByteArray()),
				signatureParameters.getDigestAlgorithm(), getPrivateKeyEntry());

		customContentSigner = new CustomContentSigner(signatureAlgorithm.getJCEId(), signatureValue.getValue());
		generator = padesCMSSignedDataBuilder.createCMSSignedDataGenerator(signatureParameters, customContentSigner, signerInfoGeneratorBuilder, null);

		CMSSignedData cmsSignedData = CMSUtils.generateDetachedCMSSignedData(generator, content);
		return DSSASN1Utils.getDEREncoded(cmsSignedData);
	}

	@Override
	protected DocumentSignatureService<PAdESSignatureParameters> getService() {
		return null;
	}

	@Override
	protected PAdESSignatureParameters getSignatureParameters() {
		return signatureParameters;
	}

	@Override
	protected DSSDocument getDocumentToSign() {
		return documentToSign;
	}

	@Override
	protected String getSigningAlias() {
		return GOOD_USER;
	}

	private class ExternalCMSPAdESService extends PAdESService {

		private static final long serialVersionUID = -2003453716888412577L;

		private byte[] cmsSignedData;

		public ExternalCMSPAdESService(CertificateVerifier certificateVerifier) {
			super(certificateVerifier);
		}

		@Override
		protected byte[] generateCMSSignedData(final DSSDocument toSignDocument, final PAdESSignatureParameters parameters,
				final SignatureValue signatureValue) {
			if (this.cmsSignedData == null) {
				throw new NullPointerException("A CMS signed data must be provided");
			}
			return this.cmsSignedData;
		}

		public void setCmsSignedData(final byte[] cmsSignedData) {
			this.cmsSignedData = cmsSignedData;
		}

	}

}
